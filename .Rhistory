sigmapchar <- as.character(sigma.para)
sigmapchar
sigchar <- as.character(sigma)
sigchar
out.df = data.frame(orig = as.character(samplesmi), match = as.character(smiles), tani = Tanimoto, sig = sigma, sigm = sigma.meta, sigm = sigma.para)
out.df = data.frame(orig = as.character(samplesmi), match = as.character(smiles), tani = Tanimoto, sig = as.character(sigma), sigm = as.character(sigma.meta), sigp = as.character(sigma.para))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
out.df <- data.frame(char)
View(out.df)
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
out.df <- data.frame(char)
colnames(out.df) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
out.df
str(out.df)
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
out.df <- data.frame(char, stringsAsFactors = FALSE)
View(out.df)
out.df <- data.frame(orig, match, tani, sig, sigm, sigp, stringsAsFactors = FALSE)
?write_json
View(sigmas)
library(assertthat)
library(ChemmineOB)
library(ChemmineR)
library(devtools)
library(dplyr)
library(fmcsR)
library(jsonlite)
library(packrat)
library(readr)
library(rjson)
library(RJSONIO)
library(roxygen2)
library(rsconnect)
library(RSQLite)
library(shiny)
library(testthat)
library(tidyr)
library(tools)
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles))
fmcslookupfctn(sampleSDF)
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
lookupdb <- dbConnect(RSQLite::SQLite(),"")
dbWriteTable(lookupdb, "testlookup", testlookup)
dbListTables(lookupdb)
testlookup2 <- testlookup
testlookup2$ID <- seq.int(nrow(testlookup2))
lookupdb2 <- dbConnect(RSQLite::SQLite(),"")
dbWriteTable(lookupdb2, "testlookup2", testlookup2)
devtools::use_data(lookupdb2, batchfull, internal = TRUE, overwrite = TRUE)
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles))
fmcslookupfctn(sampleSDF)
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
#samplesmi <- ChemmineR::sdf2smiles(sampleSDF[1])
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
out.df <- data.frame(char, stringsAsFactors = FALSE)
colnames(out.df) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
#out.df <- data.frame("Original Fragment SMILES" = as.character(samplesmi), "MCSS Match SMILES" = as.character(smiles), "Tanimoto Index" = Tanimoto, "Sigma Value" = sigma, "Sigma Meta Value" = sigma.meta, "Sigma Para Value" = sigma.para)
print(out.df)
#print(paste("MCSS Match SMILES: ", smiles))
#print(paste("Tanimoto Index: ", Tanimoto))
#print(paste("Sigma Value: ", sigma))
#print(paste("Sigma Meta Value: ", sigma.meta))
#print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
ChemmineR::plot(MCS[1], regenCoords = TRUE, print = FALSE) #Creates a visualization of output structure
#return(out.list)
jsonlite::write_json(out.list, "output-json.csv")
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
#samplesmi <- ChemmineR::sdf2smiles(sampleSDF[1])
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
out.df <- data.frame(char, stringsAsFactors = FALSE)
colnames(out.df) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
#out.df <- data.frame("Original Fragment SMILES" = as.character(samplesmi), "MCSS Match SMILES" = as.character(smiles), "Tanimoto Index" = Tanimoto, "Sigma Value" = sigma, "Sigma Meta Value" = sigma.meta, "Sigma Para Value" = sigma.para)
print(out.df)
#print(paste("MCSS Match SMILES: ", smiles))
#print(paste("Tanimoto Index: ", Tanimoto))
#print(paste("Sigma Value: ", sigma))
#print(paste("Sigma Meta Value: ", sigma.meta))
#print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
ChemmineR::plot(MCS[1], regenCoords = TRUE, print = FALSE) #Creates a visualization of output structure
#return(out.list)
jsonlite::write_json(out.df, "output-json.csv")
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
#samplesmi <- ChemmineR::sdf2smiles(sampleSDF[1])
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
out.df <- data.frame(char, stringsAsFactors = FALSE)
colnames(out.df) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
#out.df <- data.frame("Original Fragment SMILES" = as.character(samplesmi), "MCSS Match SMILES" = as.character(smiles), "Tanimoto Index" = Tanimoto, "Sigma Value" = sigma, "Sigma Meta Value" = sigma.meta, "Sigma Para Value" = sigma.para)
print(out.df)
#print(paste("MCSS Match SMILES: ", smiles))
#print(paste("Tanimoto Index: ", Tanimoto))
#print(paste("Sigma Value: ", sigma))
#print(paste("Sigma Meta Value: ", sigma.meta))
#print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
ChemmineR::plot(MCS[1], regenCoords = TRUE, print = FALSE) #Creates a visualization of output structure
#return(out.list)
jsonlite::write_json(out.df, "output-json.csv")
print(out.df)
OrigSMI <- as.character(samplesmi)
MatchSMI <- as.character(smiles)
TaniIndex <- as.character(Tanimoto)
SigVal <- as.character(sigma)
SigMVal <- as.character(sigma.meta)
SigPVal <- as.character(sigma.para)
out.df <- data.frame(OrigSMI, MatchSMI, TaniIndex, SigVal, SigMVal, SigPVal, stringsAsFactors = FALSE)
colnames(out.df) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
#out.df <- data.frame("Original Fragment SMILES" = as.character(samplesmi), "MCSS Match SMILES" = as.character(smiles), "Tanimoto Index" = Tanimoto, "Sigma Value" = sigma, "Sigma Meta Value" = sigma.meta, "Sigma Para Value" = sigma.para)
print(out.df)
OrigSMI <- as.character(samplesmi)
MatchSMI <- as.character(smiles)
TaniIndex <- as.character(Tanimoto)
SigVal <- as.character(sigma)
SigMVal <- as.character(sigma.meta)
SigPVal <- as.character(sigma.para)
out.df <- data.frame(OrigSMI, MatchSMI, TaniIndex, SigVal, SigMVal, SigPVal, stringsAsFactors = FALSE)
colnames(out.df) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
out.df <- data.frame(OrigSMI, MatchSMI, TaniIndex, SigVal, SigMVal, SigPVal, stringsAsFactors = FALSE)
?data.frame
OrigSMI <- as.character(samplesmi)
MatchSMI <- as.character(smiles)
TaniIndex <- as.character(Tanimoto)
SigVal <- as.character(sigma)
SigMVal <- as.character(sigma.meta)
SigPVal <- as.character(sigma.para)
out.df <- data.frame(OrigSMI, MatchSMI, TaniIndex, SigVal, SigMVal, SigPVal, stringsAsFactors = FALSE, check.rows = TRUE, check.names = TRUE, fix.empty.names = TRUE)
OrigSMI <- as.character(samplesmi)
MatchSMI <- as.character(smiles)
TaniIndex <- as.character(Tanimoto)
SigVal <- as.character(sigma)
SigMVal <- as.character(sigma.meta)
SigPVal <- as.character(sigma.para)
out.df <- data.frame(OrigSMI, MatchSMI, TaniIndex, SigVal, SigMVal, SigPVal, stringsAsFactors = FALSE, check.rows = TRUE, check.names = TRUE)
OrigSMI <- as.character(samplesmi)
MatchSMI <- as.character(smiles)
TaniIndex <- as.character(Tanimoto)
SigVal <- as.character(sigma)
SigMVal <- as.character(sigma.meta)
SigPVal <- as.character(sigma.para)
out.df <- data.frame(OrigSMI, MatchSMI, TaniIndex, SigVal, SigMVal, SigPVal, stringsAsFactors = FALSE, check.rows = TRUE)
OrigSMI <- as.character(samplesmi)
MatchSMI <- as.character(smiles)
TaniIndex <- as.character(Tanimoto)
SigVal <- as.character(sigma)
SigMVal <- as.character(sigma.meta)
SigPVal <- as.character(sigma.para)
out.df <- data.frame(OrigSMI, MatchSMI, TaniIndex, SigVal, SigMVal, SigPVal, stringsAsFactors = TRUE)
?jsonlite
?write_json
?tempfile
jsonlite::write_json(out.df, "output-json.txt")
?write_json
jsonlite::write_json(out.df, "output-json.txt", factor = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value"))
jsonlite::write_json(out.df, "output-json.txt", complex = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value"))
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T))
View(outdf)
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T))
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
char <- c(samplesmi, as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T))
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T))
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
char <- c(samplesmi, as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T))
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
char <- c(samplesmi, as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para))
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T))
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
print(outdf)
jsonlite::write_json(outdf, "output-json.txt")
jsonlite::write_json(outdf, "output-json.txt", dataframe = columns)
jsonlite::write_json(outdf, "output-json.txt", dataframe = "columns")
jsonlite::write_json(outdf, "output-json.csv", dataframe = "columns")
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns")
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles))
fmcslookupfctn(sampleSDF)
devtools::load_all("//aa.ad.epa.gov/ORD/ATH/USERS/A-M/MKoopman/Net MyDocuments/R/mcsstry3")
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles))
fmcslookupfctn(sampleSDF)
fmcslookupfctn <- function(sampleSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto, and Index
samplesmi = ChemmineR::sdf2smiles(sampleSDF)
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], sampleSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T)) #Converts list into usable output format
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
print(outdf) #Shows output values
#print(paste("MCSS Match SMILES: ", smiles))
#print(paste("Tanimoto Index: ", Tanimoto))
#print(paste("Sigma Value: ", sigma))
#print(paste("Sigma Meta Value: ", sigma.meta))
#print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
ChemmineR::plot(MCS[1], regenCoords = TRUE, print = FALSE) #Creates a visualization of output structure
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns")
}
else {
print("No similar matches were found.")
}
}
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles))
fmcslookupfctn(sampleSDF)
?ChemmineR::plot
?fmcs
?plotMCS
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T)) #Converts list into usable output format
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
print(outdf) #Shows output values
#print(paste("MCSS Match SMILES: ", smiles))
#print(paste("Tanimoto Index: ", Tanimoto))
#print(paste("Sigma Value: ", sigma))
#print(paste("Sigma Meta Value: ", sigma.meta))
#print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
ChemmineR::plot(MCS[1], regenCoords = TRUE, print = FALSE) #Creates a visualization of output structure
fmcsR::plotMCS(MCS[1])
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns")
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T)) #Converts list into usable output format
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
print(outdf) #Shows output values
#print(paste("MCSS Match SMILES: ", smiles))
#print(paste("Tanimoto Index: ", Tanimoto))
#print(paste("Sigma Value: ", sigma))
#print(paste("Sigma Meta Value: ", sigma.meta))
#print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
ChemmineR::plot(MCS[1], regenCoords = TRUE, print = FALSE) #Creates a visualization of output structure
fmcsR::plotMCS(smiles)
?fmcs
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T)) #Converts list into usable output format
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
print(outdf) #Shows output values
#print(paste("MCSS Match SMILES: ", smiles))
#print(paste("Tanimoto Index: ", Tanimoto))
#print(paste("Sigma Value: ", sigma))
#print(paste("Sigma Meta Value: ", sigma.meta))
#print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
ChemmineR::plot(MCS[1], regenCoords = TRUE, print = FALSE) #Creates a visualization of output structure
fmcsR::plotMCS(compared)
str(compared)
class(compared)
class(MCS)
fmcsR::plotMCS(MCS)
fmcsR::plotMCS(fmcsR::fmcs(batchfull[i], sampleSDF[1], fast = TRUE)
fmcsR::plotMCS(fmcs(batchfull[i], sampleSDF[1], fast = TRUE))
outmcs <- fmcsR::fmcs(batchfull[i], sampleSDF[1], fast = TRUE)
fmcsR::plotMCS(outmcs)
class(outmcs)
class(MCS[1])
as(outmcs, MCS, strict=TRUE)
as(outmcs, MCS, strict=FALSE)
as(outmcs, MCS, strict=TRUE, ext)
outmcs <- fmcs(batchfull[i], sampleSDF[1])
fmcsR::plotMCS(outmcs)
fmcsR::plotMCS(outmcs)
outmcs <- fmcs(batchfull[i], sampleSDF[1])
outmcs <- fmcs(batchfull[Index], sampleSDF[1])
fmcsR::plotMCS(outmcs)
sampleSDF[1]
View(sampleSDF[1])
outmcs <- fmcsR::fmcs(batchfull[Index], sampleSDF[1])
fmcsR::plotMCS(outmcs)
outmcs <- fmcsR::fmcs(MCS, sampleSDF[1])
fmcsR::plotMCS(outmcs)
MCS
sampleSDF[1]
viewsmi <- sdf2smiles(MCS)
viewsmi
print(viewsmi)
View(viewsmi)
outmcs2 <- fmcs(batchfull[1], sampleSDF[1])
plotMCS(outmcs2)
outmcs2 <- fmcs(batchfull[35], sampleSDF[1])
plotMCS(outmcs2)
outmcs2 <- fmcs(batchfull[64], sampleSDF[1])
plotMCS(outmcs2)
outmcs2 <- fmcs(batchfull[12], sampleSDF[1])
plotMCS(outmcs2)
outmcs2 <- fmcs(batchfull[10], sampleSDF[1])
plotMCS(outmcs2)
outmcs2 <- fmcs(batchfull[26], sampleSDF[1])
plotMCS(outmcs2)
outmcs2 <- fmcs(batchfull[87], sampleSDF[1])
plotMCS(outmcs2)
library(assertthat)
library(ChemmineOB)
library(ChemmineR)
library(devtools)
library(dplyr)
library(fmcsR)
library(jsonlite)
library(packrat)
library(readr)
library(rjson)
library(RJSONIO)
library(roxygen2)
library(rsconnect)
library(RSQLite)
library(shiny)
library(testthat)
library(tidyr)
library(tools)
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles))
fmcslookupfctn(sampleSDF)
lookupdb <- dbConnect(RSQLite::SQLite(),"")
dbWriteTable(lookupdb, "testlookup", testlookup)
dbListTables(lookupdb)
testlookup2 <- testlookup
testlookup2$ID <- seq.int(nrow(testlookup2))
lookupdb2 <- dbConnect(RSQLite::SQLite(),"")
dbWriteTable(lookupdb2, "testlookup2", testlookup2)
devtools::use_data(lookupdb2, batchfull, internal = TRUE, overwrite = TRUE)
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles))
fmcslookupfctn(sampleSDF)
fmcslookupfctn <- function(sampleSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto, and Index
samplesmi = ChemmineR::sdf2smiles(sampleSDF)
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], sampleSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores values for best match in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Searches for sigma values of substructure match
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T)) #Converts list into usable output format
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value")
print(outdf) #Shows output values
outmcs <- fmcsR::fmcs(MCS, sampleSDF[1])
fmcsR::plotMCS(outmcs)
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns")
}
else {
print("No similar matches were found.")
}
}
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles))
fmcslookupfctn(sampleSDF)
library(assertthat)
library(ChemmineOB)
library(ChemmineR)
library(devtools)
library(dplyr)
library(fmcsR)
library(jsonlite)
library(packrat)
library(readr)
library(rjson)
library(RJSONIO)
library(roxygen2)
library(rsconnect)
library(RSQLite)
library(shiny)
library(testthat)
library(tidyr)
library(tools)
lookupdb <- dbConnect(RSQLite::SQLite(),"")
dbWriteTable(lookupdb, "testlookup", testlookup)
dbListTables(lookupdb)
testlookup2 <- testlookup
testlookup2$ID <- seq.int(nrow(testlookup2))
lookupdb2 <- dbConnect(RSQLite::SQLite(),"")
dbWriteTable(lookupdb2, "testlookup2", testlookup2)
devtools::use_data(lookupdb2, batchfull, internal = TRUE, overwrite = TRUE)
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T)) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value") #Creates column labels for the dataframe
print(paste("Original Fragment SMILES: ", samplesmi))
print(paste("MCSS Match SMILES: ", smiles))
print(paste("Tanimoto Index: ", Tanimoto))
print(paste("Sigma Value: ", sigma))
print(paste("Sigma Meta Value: ", sigma.meta))
print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
outmcs <- fmcsR::fmcs(MCS, sampleSDF[1]) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
write.csv(outdf, "fmcs-output.csv") #Writes outdf to an output file
?write_json
nomatch = "No similar matches were found."
print(nomatch)
jsonlite::write_json(nomatch, "output-nomatch.json", complex = "string")
nomatch = "No similar matches were found."
print(nomatch)
outnomatch <- c(nomatch, as.character(samplesmi))
jsonlite::write_json(outnomatch, "output-nomatch.json", complex = "string")
nomatch = "No similar matches were found."
origsmi = "Original Fragment SMILES: "
print(nomatch)
outnomatch <- c(nomatch, origsmi, as.character(samplesmi))
jsonlite::write_json(outnomatch, "output-nomatch.json", complex = "string")
nomatch = "No similar matches were found."
origsmi = "Original Fragment SMILES: "
print(nomatch)
outnomatch <- c(nomatch, paste(origsmi, as.character(samplesmi)))
jsonlite::write_json(outnomatch, "output-nomatch.json", complex = "string")
nomatch = "No similar matches were found."
print(nomatch)
outnomatch <- c(nomatch, paste("Original Fragment SMILES:", as.character(samplesmi)))
jsonlite::write_json(outnomatch, "output-nomatch.json", complex = "string")
NoMatch = "No similar matches were found."
print(NoMatch)
OutNoMatch <- c(NoMatch, as.character(samplesmi))
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T))
colnames(nomatchDF) = c("Error Message", "Original Fragment SMILES")
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns")
outmcs <- fmcsR::fmcs(MCS, sampleSDF[1])
outmcs
?fmcs
MCS
View(MCS)
MCSsmi <- sdf2smiles(MCS)
MCSsmi
View(MCSsmi)
MCSsmi <- as.character(MCSsmi)
MCSsmi
samsmichar <- as.character(samplesmi)
samsmichar
sampleSDF[1]
sampleSMILE <- sdf2smiles(sampleSDF[1])
sampleSMILE <- as.character(sampleSMILE)
sampleSMILE
sampleSMILE2 <- sdf2smiles(sampleSDF)
sampleSMILE2 <- as.character(sampleSMILE2)
sampleSMILE2
outmcs <- fmcsR::fmcs(MCS, sampleSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs)
outmcs
?plotMCS

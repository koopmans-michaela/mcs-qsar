jsonlite::write_json(outdf, "output-json.json", dataframe = "columns") #Writes a JSON file containing the output values dataframe for use in CTS
}
else {
NoMatch = "No similar matches were found. The closest structure available is given." #Creates error message
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
OutNoMatch <- c(NoMatch, as.character(samplesmi), as.character(closest), as.character(Tanimoto)) #Starts creating dataframe to put error message into output JSON
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T)) #Creates dataframe
colnames(nomatchDF) = c("No Match Found", "Original Fragment SMILES", "Closest Match SMILES", "Tanimoto Match Index") #Gives dataframe column names
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns") #Outputs error message in JSON format
}
}
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles)) #Prints to console the SMILES string for the original sample fragment
fmcslookupfctn(sampleSDF) #Performs MCS matching on sample fragment
fmcsforpckg <- function(sampleSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto, and Index
samplesmi = ChemmineR::sdf2smiles(sampleSDF) #Converts sample fragment from SDF to SMILES to be used in the output dataframe
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], sampleSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
smilesCHAR <- as.character(smiles) #Converts match molecule to character string for editing
names(smilesCHAR) = "MCSS Match Structure" #Changes name of match molecule character vector to appropriate label for use in plotMCS
matchSDF <- ChemmineR::smiles2sdf(smilesCHAR) #Converts renamed match molecule vector back to SDF for use in plotMCS
fragSMI <- ChemmineR::sdf2smiles(sampleSDF[1]) #Converts original fragment to SMIset format
fragCHAR <- as.character(fragSMI) #Converts original fragment to character string for editing
names(fragCHAR) = "Original Fragment Structure" #Changes name of original fragment character vector to appropriate label for use in plotMCS
fragSDF <- ChemmineR::smiles2sdf(fragCHAR) #Converts renamed original fragment vector back to SDF for use in plotMCS
outmcs <- fmcsR::fmcs(fragSDF, matchSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow=1, byrow=T)) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value") #Creates column labels for the dataframe
print(paste("Original Fragment SMILES: ", samplesmi))
print(paste("MCSS Match SMILES: ", smiles))
print(paste("Tanimoto Match Index: ", Tanimoto))
print(paste("Sigma Value: ", sigma))
print(paste("Sigma Meta Value: ", sigma.meta))
print(paste("Sigma Para Value: ", sigma.para)) #Prints relevant outputs
write.csv(outdf, "mcss-output.csv") #Writes outdf to an output .csv file
}
else {
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
print("No similar matches were found. The closest structure available is given") #Prints error message to console
print(paste("Original Fragment SMILES: ", samplesmi)) #Prints original fragment SMILES to console as a reminder
print(paste("Closest Match SMILES: ", as.character(closest))) #Prints closest match molecule's SMILES to console
print(paste("Tanimoto Match Index: ", Tanimoto))
}
}
samplesmiles <- string #Stores SMILES string input
sampleSDF <- ChemmineR::smiles2sdf(samplesmiles) #Converts user-input SMILES sample string to SDF format
print(paste("Original Fragment SMILES: ", samplesmiles)) #Prints to console the SMILES string for the original sample fragment
fmcsforpckg(sampleSDF) #Performs MCS matching on sample fragment
?readJSON
?fromJSON
?nrows
?nrow
CTSin <- fromJSON("CTSinput.json", simplifyVector = TRUE, simplifyDataFrame = simplifyVector, simplifyMatrix = simplifyVector, flatten = FALSE)
library(assertthat)
library(ChemmineOB)
library(ChemmineR)
library(devtools)
library(dplyr)
library(fmcsR)
library(jsonlite)
library(packrat)
library(readr)
library(rjson)
library(RJSONIO)
library(roxygen2)
library(rsconnect)
library(RSQLite)
library(shiny)
library(testthat)
library(tidyr)
library(tools)
CTSin <- fromJSON("CTSinput.json", simplifyVector = TRUE, simplifyDataFrame = simplifyVector, simplifyMatrix = simplifyVector, flatten = FALSE)
CTSin
View(CTSin)
str(CTSin)
CTSin <- fromJSON("CTSinput2.json", simplifyVector = TRUE, simplifyDataFrame = simplifyVector, simplifyMatrix = simplifyVector, flatten = FALSE)
View(CTSin)
CTSin <- fromJSON("CTSinput2.json", simplifyVector = TRUE, simplifyDataFrame = simplifyVector, simplifyMatrix = simplifyVector, flatten = FALSE)
View(CTSin)
str(CTSin)
CTSin[1]
CTSin[,1]
CTSdf <- data.frame(matrix(unlist(1), nrow = numfrags, byrow = TRUE))
numfrags = nrow(CTSin)
CTSdf <- data.frame(matrix(unlist(1), nrow = numfrags, byrow = TRUE))
CTSdf <- data.frame(matrix(unlist(CTSin), nrow = numfrags, byrow = TRUE))
CTSdf <- data.frame(matrix(unlist(CTSin), nrow = numfrags, byrow = TRUE), stringsAsFactors = FALSE)
CTSin[1,1]
class(CTSin)
?fromJSON
CTSin[2]
CTSdf <- as.data.frame(CTsin)
CTSdf <- as.data.frame(CTSin)
View(CTSdf)
CTSdf[1,2]
CTSdf[1]
CTSdf[,1]
CTSdf[1,1:2]
nrow(CTSdf)
CTSdf[1,1]
frag <- CTSdf[1,1]
frag
CTSdf[2,1]
finaldf <- data.frame("Original Fragment Smiles" = character(), "MCSS Match SMILES" = character(), "Tanimoto Match Index" = character(), "Sigma Value" = character(), "Sigma Meta Value" = character(), "Sigma Para Value" = character())
finaldf
str(finaldf)
frag
fragSDF <- smiles2sdf(frag)
fragSDF <- smiles2sdf(as.character(frag))
fmcsout <- fmcsforCTS(fragSDF)
fmcsforCTS<- function(fragSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto Match Value and Index Number
samplesmi = ChemmineR::sdf2smiles(fragSDF) #Converts sample fragment from SDF to SMILES to be used in the output dataframe
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], fragSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
smilesCHAR <- as.character(smiles) #Converts match molecule to character string for editing
names(smilesCHAR) = "MCSS Match Structure" #Changes name of match molecule character vector to appropriate label for use in plotMCS
matchSDF <- ChemmineR::smiles2sdf(smilesCHAR) #Converts renamed match molecule vector back to SDF for use in plotMCS
fragSMI <- ChemmineR::sdf2smiles(fragSDF[1]) #Converts original fragment to SMIset format
fragCHAR <- as.character(fragSMI) #Converts original fragment to character string for editing
names(fragCHAR) = "Original Fragment Structure" #Changes name of original fragment character vector to appropriate label for use in plotMCS
fragSDF2 <- ChemmineR::smiles2sdf(fragCHAR) #Converts renamed original fragment vector back to SDF for use in plotMCS
outmcs <- fmcsR::fmcs(fragSDF2, matchSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow = 1, byrow = T)) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Match Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value") #Creates column labels for the dataframe
print(outdf) #Shows output values in console
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns") #Writes a JSON file containing the output values dataframe for use in CTS
return(char)
}
else {
NoMatch = "No similar matches were found. The closest structure available is given." #Creates error message
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
OutNoMatch <- c(NoMatch, as.character(samplesmi), as.character(closest), as.character(Tanimoto)) #Starts creating dataframe to put error message into output JSON
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T)) #Creates dataframe
colnames(nomatchDF) = c("No Match Found", "Original Fragment SMILES", "Closest Match SMILES", "Tanimoto Match Index") #Gives dataframe column names
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns") #Outputs error message in JSON format
return(OutNoMatch)
}
}
fmcsout <- fmcsforCTS(fragSDF)
lookupdb <- dbConnect(RSQLite::SQLite(),"")
dbWriteTable(lookupdb, "testlookup", testlookup)
dbListTables(lookupdb)
testlookup2 <- testlookup
testlookup2$ID <- seq.int(nrow(testlookup2))
lookupdb2 <- dbConnect(RSQLite::SQLite(),"")
dbWriteTable(lookupdb2, "testlookup2", testlookup2)
devtools::use_data(lookupdb2, batchfull, internal = TRUE, overwrite = TRUE)
fmcsout <- fmcsforCTS(fragSDF)
fmcsout
str(fmcsout)
fmcsforCTS<- function(fragSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto Match Value and Index Number
samplesmi = ChemmineR::sdf2smiles(fragSDF) #Converts sample fragment from SDF to SMILES to be used in the output dataframe
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], fragSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
smilesCHAR <- as.character(smiles) #Converts match molecule to character string for editing
names(smilesCHAR) = "MCSS Match Structure" #Changes name of match molecule character vector to appropriate label for use in plotMCS
matchSDF <- ChemmineR::smiles2sdf(smilesCHAR) #Converts renamed match molecule vector back to SDF for use in plotMCS
fragSMI <- ChemmineR::sdf2smiles(fragSDF[1]) #Converts original fragment to SMIset format
fragCHAR <- as.character(fragSMI) #Converts original fragment to character string for editing
names(fragCHAR) = "Original Fragment Structure" #Changes name of original fragment character vector to appropriate label for use in plotMCS
fragSDF2 <- ChemmineR::smiles2sdf(fragCHAR) #Converts renamed original fragment vector back to SDF for use in plotMCS
outmcs <- fmcsR::fmcs(fragSDF2, matchSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow = 1, byrow = T)) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Match Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value") #Creates column labels for the dataframe
print(outdf) #Shows output values in console
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns") #Writes a JSON file containing the output values dataframe for use in CTS
return(outdf)
}
else {
NoMatch = "No similar matches were found. The closest structure available is given." #Creates error message
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
OutNoMatch <- c(NoMatch, as.character(samplesmi), as.character(closest), as.character(Tanimoto)) #Starts creating dataframe to put error message into output JSON
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T)) #Creates dataframe
colnames(nomatchDF) = c("No Match Found", "Original Fragment SMILES", "Closest Match SMILES", "Tanimoto Match Index") #Gives dataframe column names
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns") #Outputs error message in JSON format
return(OutNoMatch)
}
}
fmcsout <- fmcsforCTS(fragSDF)
fmcsout
str(fmcsout)
fmcsforCTS<- function(fragSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto Match Value and Index Number
samplesmi = ChemmineR::sdf2smiles(fragSDF) #Converts sample fragment from SDF to SMILES to be used in the output dataframe
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], fragSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
smilesCHAR <- as.character(smiles) #Converts match molecule to character string for editing
names(smilesCHAR) = "MCSS Match Structure" #Changes name of match molecule character vector to appropriate label for use in plotMCS
matchSDF <- ChemmineR::smiles2sdf(smilesCHAR) #Converts renamed match molecule vector back to SDF for use in plotMCS
fragSMI <- ChemmineR::sdf2smiles(fragSDF[1]) #Converts original fragment to SMIset format
fragCHAR <- as.character(fragSMI) #Converts original fragment to character string for editing
names(fragCHAR) = "Original Fragment Structure" #Changes name of original fragment character vector to appropriate label for use in plotMCS
fragSDF2 <- ChemmineR::smiles2sdf(fragCHAR) #Converts renamed original fragment vector back to SDF for use in plotMCS
outmcs <- fmcsR::fmcs(fragSDF2, matchSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow = 1, byrow = T)) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Match Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value", stringsAsFactors = FALSE) #Creates column labels for the dataframe
print(outdf) #Shows output values in console
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns") #Writes a JSON file containing the output values dataframe for use in CTS
return(outdf)
}
else {
NoMatch = "No similar matches were found. The closest structure available is given." #Creates error message
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
OutNoMatch <- c(NoMatch, as.character(samplesmi), as.character(closest), as.character(Tanimoto)) #Starts creating dataframe to put error message into output JSON
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T)) #Creates dataframe
colnames(nomatchDF) = c("No Match Found", "Original Fragment SMILES", "Closest Match SMILES", "Tanimoto Match Index") #Gives dataframe column names
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns") #Outputs error message in JSON format
return(OutNoMatch)
}
}
fmcsout <- fmcsforCTS(fragSDF)
fmcsforCTS<- function(fragSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto Match Value and Index Number
samplesmi = ChemmineR::sdf2smiles(fragSDF) #Converts sample fragment from SDF to SMILES to be used in the output dataframe
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], fragSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
smilesCHAR <- as.character(smiles) #Converts match molecule to character string for editing
names(smilesCHAR) = "MCSS Match Structure" #Changes name of match molecule character vector to appropriate label for use in plotMCS
matchSDF <- ChemmineR::smiles2sdf(smilesCHAR) #Converts renamed match molecule vector back to SDF for use in plotMCS
fragSMI <- ChemmineR::sdf2smiles(fragSDF[1]) #Converts original fragment to SMIset format
fragCHAR <- as.character(fragSMI) #Converts original fragment to character string for editing
names(fragCHAR) = "Original Fragment Structure" #Changes name of original fragment character vector to appropriate label for use in plotMCS
fragSDF2 <- ChemmineR::smiles2sdf(fragCHAR) #Converts renamed original fragment vector back to SDF for use in plotMCS
outmcs <- fmcsR::fmcs(fragSDF2, matchSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow = 1, byrow = T), stringsAsFactors = FALSE) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Match Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value") #Creates column labels for the dataframe
print(outdf) #Shows output values in console
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns") #Writes a JSON file containing the output values dataframe for use in CTS
return(outdf)
}
else {
NoMatch = "No similar matches were found. The closest structure available is given." #Creates error message
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
OutNoMatch <- c(NoMatch, as.character(samplesmi), as.character(closest), as.character(Tanimoto)) #Starts creating dataframe to put error message into output JSON
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T)) #Creates dataframe
colnames(nomatchDF) = c("No Match Found", "Original Fragment SMILES", "Closest Match SMILES", "Tanimoto Match Index") #Gives dataframe column names
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns") #Outputs error message in JSON format
return(OutNoMatch)
}
}
fmcsout <- fmcsforCTS(fragSDF)
fmcsforCTS<- function(fragSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto Match Value and Index Number
samplesmi = ChemmineR::sdf2smiles(fragSDF) #Converts sample fragment from SDF to SMILES to be used in the output dataframe
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], fragSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
smilesCHAR <- as.character(smiles) #Converts match molecule to character string for editing
names(smilesCHAR) = "MCSS Match Structure" #Changes name of match molecule character vector to appropriate label for use in plotMCS
matchSDF <- ChemmineR::smiles2sdf(smilesCHAR) #Converts renamed match molecule vector back to SDF for use in plotMCS
fragSMI <- ChemmineR::sdf2smiles(fragSDF[1]) #Converts original fragment to SMIset format
fragCHAR <- as.character(fragSMI) #Converts original fragment to character string for editing
names(fragCHAR) = "Original Fragment Structure" #Changes name of original fragment character vector to appropriate label for use in plotMCS
fragSDF2 <- ChemmineR::smiles2sdf(fragCHAR) #Converts renamed original fragment vector back to SDF for use in plotMCS
outmcs <- fmcsR::fmcs(fragSDF2, matchSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow = 1, byrow = T), stringsAsFactors = FALSE) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Match Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value") #Creates column labels for the dataframe
print(outdf) #Shows output values in console
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns") #Writes a JSON file containing the output values dataframe for use in CTS
return(outdf)
}
else {
NoMatch = "No similar matches were found. The closest structure available is given." #Creates error message
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
OutNoMatch <- c(NoMatch, as.character(samplesmi), as.character(closest), as.character(Tanimoto)) #Starts creating dataframe to put error message into output JSON
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T)) #Creates dataframe
colnames(nomatchDF) = c("No Match Found", "Original Fragment SMILES", "Closest Match SMILES", "Tanimoto Match Index") #Gives dataframe column names
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns") #Outputs error message in JSON format
return(OutNoMatch)
}
}
fmcsout <- fmcsforCTS(fragSDF)
str(fmcsout)
View(fmcsout)
fmcsout[1] <- fmcsforCTS(fragSDF)
fmcsout[[1]] <- fmcsforCTS(fragSDF)
View(fmcsout)
fmcsout <- fmcsforCTS(fragSDF)
View(fmcsout)
fmcsout.list <- split(fmcsout, seq(nrow(fmcsout)))
fmcsout.list
str(fmcsout.list)
View(fmcsout.list)
fmcsforCTS<- function(fragSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto Match Value and Index Number
samplesmi = ChemmineR::sdf2smiles(fragSDF) #Converts sample fragment from SDF to SMILES to be used in the output dataframe
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], fragSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
smilesCHAR <- as.character(smiles) #Converts match molecule to character string for editing
names(smilesCHAR) = "MCSS Match Structure" #Changes name of match molecule character vector to appropriate label for use in plotMCS
matchSDF <- ChemmineR::smiles2sdf(smilesCHAR) #Converts renamed match molecule vector back to SDF for use in plotMCS
fragSMI <- ChemmineR::sdf2smiles(fragSDF[1]) #Converts original fragment to SMIset format
fragCHAR <- as.character(fragSMI) #Converts original fragment to character string for editing
names(fragCHAR) = "Original Fragment Structure" #Changes name of original fragment character vector to appropriate label for use in plotMCS
fragSDF2 <- ChemmineR::smiles2sdf(fragCHAR) #Converts renamed original fragment vector back to SDF for use in plotMCS
outmcs <- fmcsR::fmcs(fragSDF2, matchSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow = 1, byrow = T), stringsAsFactors = FALSE) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Match Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value") #Creates column labels for the dataframe
print(outdf) #Shows output values in console
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns") #Writes a JSON file containing the output values dataframe for use in CTS
return(outdf)
}
else {
Error = "Error"
NoMatch = "No similar matches were found. The closest structure available is given." #Creates error message
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
OutNoMatch <- c(Error, NoMatch, as.character(samplesmi), as.character(closest), as.character(Tanimoto)) #Starts creating dataframe to put error message into output JSON
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T)) #Creates dataframe
colnames(nomatchDF) = c("Error", "No Match Found", "Original Fragment SMILES", "Closest Match SMILES", "Tanimoto Match Index") #Gives dataframe column names
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns") #Outputs error message in JSON format
return(OutNoMatch)
}
}
fmcsout[1,1]
frag <- CTSdf[2,1]
fragSDF <- smiles2sdf(as.character(frag))
fmcsout <- fmcsforCTS(fragSDF)
fmcsout
fmcsout[1,1]
str(fmcsout)
fmcsforCTS<- function(fragSDF) {
MCS = batchfull[1] #Loads comparison library
Tanimoto = 0
Index = 0 #Sets up variables Tanimoto Match Value and Index Number
samplesmi = ChemmineR::sdf2smiles(fragSDF) #Converts sample fragment from SDF to SMILES to be used in the output dataframe
for(i in 1:300)
{
compared <- fmcsR::fmcs(batchfull[i], fragSDF[1], fast = TRUE) #Compares sample molecule to each molecule in comparison collection
s <- readr::parse_number(compared[4]) #Removes words from output to isolate comparison value
if (s > Tanimoto) #Checks if comparison value is the best match
{
Tanimoto = s
MCS = batchfull[i]
Index = i #Continues checking against the rest of the comparison collection
}
}
if (Tanimoto > 0.7){
smiles <- ChemmineR::sdf2smiles(MCS[1]) #Stores the best match molecule in SMILES format
smilesCHAR <- as.character(smiles) #Converts match molecule to character string for editing
names(smilesCHAR) = "MCSS Match Structure" #Changes name of match molecule character vector to appropriate label for use in plotMCS
matchSDF <- ChemmineR::smiles2sdf(smilesCHAR) #Converts renamed match molecule vector back to SDF for use in plotMCS
fragSMI <- ChemmineR::sdf2smiles(fragSDF[1]) #Converts original fragment to SMIset format
fragCHAR <- as.character(fragSMI) #Converts original fragment to character string for editing
names(fragCHAR) = "Original Fragment Structure" #Changes name of original fragment character vector to appropriate label for use in plotMCS
fragSDF2 <- ChemmineR::smiles2sdf(fragCHAR) #Converts renamed original fragment vector back to SDF for use in plotMCS
outmcs <- fmcsR::fmcs(fragSDF2, matchSDF) #Runs MCS between match molecule and original fragment to get the output information in MCS format for use in the plotMCS visualization function
fmcsR::plotMCS(outmcs) #Visualizes the original fragment and match molecules and highlights the similar substructure
ChemmineR::write.SMI(smiles, file = "smiles.smi") #Creates output SMILES file for the match molecule
sigma <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index)) #Retrieves sigma values of match molecule
sigma.meta <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.meta" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
sigma.para <- RSQLite::dbGetQuery(lookupdb2, 'SELECT "sigma.para" FROM testlookup2 WHERE "ID" == :z', params = list(z = Index))
char <- c(as.character(samplesmi), as.character(smiles), as.character(Tanimoto), as.character(sigma), as.character(sigma.meta), as.character(sigma.para)) #Creates list of output values
outdf <- data.frame(matrix(unlist(char), nrow = 1, byrow = T), stringsAsFactors = FALSE) #Converts list into usable output format as a dataframe
colnames(outdf) = c("Original Fragment SMILES","MCSS Match SMILES", "Tanimoto Match Index", "Sigma Value", "Sigma Meta Value", "Sigma Para Value") #Creates column labels for the dataframe
print(outdf) #Shows output values in console
jsonlite::write_json(outdf, "output-json.json", dataframe = "columns") #Writes a JSON file containing the output values dataframe for use in CTS
return(outdf)
}
else {
Error = "Error"
NoMatch = "No similar matches were found. The closest structure available is given." #Creates error message
closest <- ChemmineR::sdf2smiles(MCS[1]) #Stores the closest MCSS match SMILES
OutNoMatch <- c(Error, NoMatch, as.character(samplesmi), as.character(closest), as.character(Tanimoto)) #Starts creating dataframe to put error message into output JSON
nomatchDF <- data.frame(matrix(unlist(OutNoMatch), nrow=1, byrow = T)) #Creates dataframe
colnames(nomatchDF) = c("Error", "No Match Found", "Original Fragment SMILES", "Closest Match SMILES", "Tanimoto Match Index") #Gives dataframe column names
jsonlite::write_json(nomatchDF, "output-nomatch.json", dataframe = "columns") #Outputs error message in JSON format
return(nomatchDF)
}
}
fmcsout <- fmcsforCTS(fragSDF)
fmcsout
fmcsout[1,1]
identical(fmcsout[1,1], "Error")
identical(as.character(fmcsout[1,1]), "Error")
View(testlookup)
write.csv(testlookup, "testlookup.csv")
